#  O(h + k ) time | O(h) space
class BST:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

class node:
    def __init__(self, value, ctr):
        self.value = value
        self.ctr = ctr
        
def findKthLargestValueInBst(tree, k):
    # Write your code here.
    nde = node(0, 0)
    findKthLargestValueInBstHelper(tree, nde, k)
    return nde.value
    
def findKthLargestValueInBstHelper(tree , nde, k) :

    if tree is None or nde.ctr >= k :
        return 

    findKthLargestValueInBstHelper(tree.right , nde, k)
    if nde.ctr < k :
        nde.value = tree.value
        nde.ctr += 1
        findKthLargestValueInBstHelper(tree.left, nde, k)
